// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  avatar       String?
  items        Item[]
  tokens       Token[]
  favs         Fav[]
  cart         CartItem[]
  comments     Comment[]
  commentLikes CommentLike[]
  streams      Stream[]
  messages     Message[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  Subcategory Subcategory[]
  Item        Item[]
}

model Subcategory {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
  Item       Item[]

  @@index([categoryId])
}

model Item {
  id            Int         @id @default(autoincrement())
  name          String
  image         String
  price         Int
  description   String      @db.MediumText
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId    Int
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subcategoryId Int
  favs          Fav[]
  cartItem      CartItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  comments      Comment[]

  @@index([userId])
  @@index([categoryId])
  @@index([subcategoryId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([itemId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  qty       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([itemId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  item      Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  comment   String        @db.MediumText
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     CommentLike[]

  @@index([userId])
  @@index([itemId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([commentId])
}

model Stream {
  id            Int       @id @default(autoincrement())
  title         String
  description   String    @db.MediumText
  messages      Message[]
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  cloudflareId  String
  cloudflareUrl String
  cloudflareKey String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  message   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([streamId])
}
